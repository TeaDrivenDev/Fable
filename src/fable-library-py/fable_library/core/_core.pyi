from typing import Any, final

from typing_extensions import Self

class Numeric:
    def __init__(self, value: int | Numeric) -> None: ...
    def __add__(self, other: Any) -> Self: ...
    def __sub__(self, other: Any) -> Self: ...
    def __mul__(self, other: Any) -> Self: ...
    def __truediv__(self, other: int | Numeric) -> Self: ...
    def __mod__(self, other: Any) -> Self: ...
    def __neg__(self) -> Self: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...
    def __le__(self, other: Any) -> bool: ...
    def __gt__(self, other: Any) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...
    def __int__(self) -> int: ...
    def __index__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __lshift__(self, other: int | Numeric) -> Self: ...
    def __rshift__(self, other: int | Numeric) -> Self: ...
    def __rlshift__(self, other: int) -> Any: ...
    def __rrshift__(self, other: int) -> Any: ...
    def __and__(self, other: int | Numeric) -> Self: ...
    def __or__(self, other: int | Numeric) -> Self: ...
    def __xor__(self, other: int | Numeric) -> Self: ...
    def __invert__(self) -> Self: ...
    def __radd__(self, other: Any) -> Any: ...
    def __rsub__(self, other: Any) -> Any: ...
    def __rmul__(self, other: Any) -> Any: ...
    def __abs__(self) -> Self: ...

@final
class UInt8(Numeric): ...

@final
class Int8(Numeric): ...

@final
class UInt16(Numeric): ...

@final
class Int16(Numeric): ...

@final
class UInt32(Numeric): ...

@final
class Int32(Numeric): ...

@final
class UInt64(Numeric): ...

@final
class Int64(Numeric): ...
